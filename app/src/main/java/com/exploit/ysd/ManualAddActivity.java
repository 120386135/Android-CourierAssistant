package com.exploit.ysd;

import android.app.Activity;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.BoolRes;
import android.support.v4.app.FragmentActivity;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.EdgeEffect;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.Toast;

import com.baidu.mapapi.map.BaiduMap;
import com.baidu.mapapi.map.BitmapDescriptor;
import com.baidu.mapapi.map.BitmapDescriptorFactory;
import com.baidu.mapapi.map.MapStatus;
import com.baidu.mapapi.map.MapStatusUpdate;
import com.baidu.mapapi.map.MapStatusUpdateFactory;
import com.baidu.mapapi.map.MarkerOptions;
import com.baidu.mapapi.map.OverlayOptions;
import com.baidu.mapapi.map.SupportMapFragment;
import com.baidu.mapapi.model.LatLng;
import com.baidu.mapapi.search.sug.OnGetSuggestionResultListener;
import com.baidu.mapapi.search.sug.SuggestionResult;
import com.baidu.mapapi.search.sug.SuggestionSearch;
import com.baidu.mapapi.search.sug.SuggestionSearchOption;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

/**
 * Created by zhongtai on 2016/7/13.
 */
public class ManualAddActivity extends FragmentActivity implements
        OnGetSuggestionResultListener {
    // 定义 BaiduMap 地图对象的操作方法与接口
    private BaiduMap mbaiduMap;
    // LatLng地理坐标基本数据结构
    private LatLng latlng;
    private SuggestionSearch mSuggestionSearch = null;
    private ArrayList suggestResult = null;
    private ArrayAdapter sugAdapter;
    private ListView resultListView = null;
    private Spinner suggestSpinner = null;
    private AutoCompleteTextView addressEdit = null;
    private EditText phoneNumEdit = null;
    private BitmapDescriptor bimp;
    private MapStatusUpdate updateMap = null;
    private Data returnData = null;
    boolean addressClear = false;
    private Data locationLatLng = null;
    private String mCity = null;
    private boolean oldCustomer;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.manual_add_layout);
        phoneNumEdit = (AutoCompleteTextView) findViewById(R.id.phoneNumEdit);
        addressEdit = (AutoCompleteTextView) findViewById(R.id.addressEdit);
        returnData = new Data();
        mbaiduMap = ((SupportMapFragment) (getSupportFragmentManager()
                .findFragmentById(R.id.map))).getBaiduMap();



        locationLatLng = (Data) getIntent().getSerializableExtra("latlng");
        if (locationLatLng.getCity() != null)
            mCity = locationLatLng.getCity();
        Log.d("fsgfsd", String.valueOf(locationLatLng.getLat()) + String.valueOf(locationLatLng.getLng()) + locationLatLng.getAddress() + locationLatLng.getPhoneNum());
        latlng = new LatLng(locationLatLng.getLat(), locationLatLng.getLng());


        // 加载一个显示坐标的一个图标
        bimp = new BitmapDescriptorFactory()
                .fromResource(R.drawable.icon_mark);
        // 普通地图
        mbaiduMap.setMapType(BaiduMap.MAP_TYPE_NORMAL);
        // 构建MarkerOption，用于在地图上添加Marker
        OverlayOptions option = new MarkerOptions().position(latlng).icon(bimp);
        mbaiduMap.addOverlay(option);
        mbaiduMap.setMapStatus(MapStatusUpdateFactory.newMapStatus(new MapStatus.Builder().zoom(18).build()));
        updateMap = MapStatusUpdateFactory.newLatLng(latlng);
        mbaiduMap.animateMapStatus(updateMap);




        // 初始化建议搜索模块，注册建议搜索事件监听
        mSuggestionSearch = SuggestionSearch.newInstance();
        mSuggestionSearch.setOnGetSuggestionResultListener(this);


        ImageView manualBackBtn = (ImageView) findViewById(R.id.manual_back);
        manualBackBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                setResult(RESULT_CANCELED);
                ManualAddActivity.this.finish();
            }
        });

        ImageView confirmBtn = (ImageView) findViewById(R.id.confirm_btn);
        confirmBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (addressClear) {
                    if (phoneNumEdit.getText().toString().length() < 11)
                        Toast.makeText(ManualAddActivity.this, "请填手机号码", 0).show();
                    else {
                        if (!oldCustomer){//添加到用户数据库中

                            AddcCustomerToMySql addTask = new AddcCustomerToMySql(phoneNumEdit.getText().toString(), addressEdit.getText().toString());
                            ExecutorService service = Executors.newSingleThreadExecutor();
                            Future<Boolean> future = service.submit(addTask);
                            try{
                                if (!future.get()){
                                    Toast.makeText(ManualAddActivity.this, "添加到通讯录失败", 0).show();
                                }
                            }catch (Exception e){
                                e.printStackTrace();
                            }
                        }
                        returnData.setIndex(locationLatLng.getIndex());
                        returnData.setPhoneNum(phoneNumEdit.getText().toString());
                        returnData.setCity(mCity);
                        Intent intent = new Intent();
                        intent.putExtra("result", returnData);
                        setResult(RESULT_OK, intent);
                        ManualAddActivity.this.finish();
                    }
                } else {
                    Toast.makeText(ManualAddActivity.this, "请填具体地址", 0).show();

                }

            }
        });

        phoneNumEdit.addTextChangedListener(new TextWatcher() {
            @Override
            public void afterTextChanged(Editable arg0) {}
            @Override
            public void beforeTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {}
            @Override
            public void onTextChanged(CharSequence num, int arg1, int arg2, int arg3) {
                if(num.length() == 11 && locationLatLng.userName != null){
                    FindCustomerInMySql findTask = new FindCustomerInMySql(num.toString());
                    ExecutorService service = Executors.newSingleThreadExecutor();
                    Future<String> future = service.submit(findTask);
                    try{
                        if (future.get().length() > 1){
                            addressEdit.setText(future.get());
                            oldCustomer = true;
                        }
                    }catch (Exception e){
                        e.printStackTrace();
                    }
                }

            }
        });




        sugAdapter = new ArrayAdapter(this,
                android.R.layout.simple_dropdown_item_1line);
        addressEdit.setAdapter(sugAdapter);
        addressEdit.setThreshold(1);
        addressEdit.addTextChangedListener(new TextWatcher() {
            @Override
            public void afterTextChanged(Editable arg0) {}
            @Override
            public void beforeTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {}
            @Override
            public void onTextChanged(CharSequence cs, int arg1, int arg2, int arg3) {
                if (cs.length() <= 0) {
                    return;
                }
                addressClear = false;
                Log.d("kjkhgs", cs.toString());
                String url = "http://api.map.baidu.com/geocoder/v2/?ak=tmPOXuySSPlwrjO7W2OF15fw7YLZ6GYr&mcode=C4:BD:99:8D:14:55:B2:25:20:63:1E:2A:06:7F:4C:E1:71:6B:04:C6;com.exploit.ysd&output=json&address="
                        + cs.toString() + "&city=" + mCity;
                new RequestTask(url).execute();
                returnData.setAddress(cs.toString());
                /**
                 * 使用建议搜索服务获取建议列表，结果在onSuggestionResult()中更新
                 */
                mSuggestionSearch
                        .requestSuggestion((new SuggestionSearchOption())
                                .keyword(cs.toString()).city(mCity));
            }
        });


        if (locationLatLng.getAddress() != null && locationLatLng.getPhoneNum() != null){
            phoneNumEdit.setText(locationLatLng.getPhoneNum());
            addressEdit.setText(locationLatLng.getAddress());
        }

    }


    @Override
    public void onGetSuggestionResult(SuggestionResult res) {
        if (res == null || res.getAllSuggestions() == null) {
            return;
        }
        suggestResult = new ArrayList();
        for (SuggestionResult.SuggestionInfo info : res.getAllSuggestions()) {
            if (info.key != null) {
                suggestResult.add(info.key);
            }
        }
        sugAdapter = new ArrayAdapter(ManualAddActivity.this, android.R.layout.simple_dropdown_item_1line, suggestResult);
        addressEdit.setAdapter(sugAdapter);
        sugAdapter.notifyDataSetChanged();
    }

    @Override
    protected void onPause() {
        super.onPause();
    }
    @Override
    protected void onResume() {
        super.onResume();
    }
    @Override
    protected void onDestroy() {
        mSuggestionSearch.destroy();
        super.onDestroy();
    }

    private class RequestTask extends AsyncTask<Void, Void, String> {
        private String url;
        public RequestTask(String stUrl) {
            url = stUrl;
        }
        @Override
        protected String doInBackground(Void... params) {
            String tem = RequestData(url);
            return tem;
        }
        @Override
        protected void onPostExecute(String result) {
            super.onPostExecute(result);
            if (result != null) {
                Log.d("refhlsfjh" , result);
                JSONObject object = null;
                try {
                    object = new JSONObject(result);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                int status = object.optInt("status");
                if(status == 0){
                    addressClear = true;
                    Log.d("MyStatus", "geocoder status wrong");
                    JSONObject ObjectInfo = object.optJSONObject("result");
                    JSONObject resultObject = ObjectInfo.optJSONObject("location");
                    latlng = new LatLng(resultObject.optDouble("lat"), resultObject.optDouble("lng"));
                    OverlayOptions option = new MarkerOptions().position(latlng).icon(bimp);
                    mbaiduMap.clear();
                    mbaiduMap.addOverlay(option);
                    mbaiduMap.setMapStatus(MapStatusUpdateFactory.newMapStatus(new MapStatus.Builder().zoom(18).build()));
                    updateMap = MapStatusUpdateFactory.newLatLng(latlng);
                    mbaiduMap.animateMapStatus(updateMap);
                    returnData.setLat(latlng.latitude);
                    returnData.setLng(latlng.longitude);
                }else{
                    Log.d("MyStatus", "geocoder status wrong");
                }
            }
        }

        public String RequestData(String url) {
            HttpGet get = new HttpGet(url);
            HttpClient client = new DefaultHttpClient();
            StringBuilder builder = null;
            try {
                HttpResponse response = client.execute(get);
                if (response.getStatusLine().getStatusCode() == 200) {
                    InputStream inputStream = response.getEntity().getContent();
                    BufferedReader reader = new BufferedReader(
                            new InputStreamReader(inputStream));
                    builder = new StringBuilder();
                    String s = null;
                    for (s = reader.readLine(); s != null; s = reader.readLine()) {
                        builder.append(s);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return builder.toString();
        }

    }


    class FindCustomerInMySql implements Callable<String>{
        String phoneNum;
        String returnAds;
        FindCustomerInMySql(String phoneNum){
            this.phoneNum = phoneNum;
        }
        public String call(){
            try{
                Class.forName("com.mysql.jdbc.Driver");
                String url="jdbc:mysql://119.29.200.140/userdata?useUnicode=true&amp;characterEncoding=UTF-8&amp";    //JDBC的URL?useUnicode=true&characterEncoding=utf8
                Connection conn;
                conn = DriverManager.getConnection(url,"root","taizhou8");
                Statement stmt = conn.createStatement(); //创建Statement对象
                System.out.println("成功连接到数据库！");
                String sql = "select * from " + locationLatLng.userName + " where phonenum=" + phoneNum;    //要执行的SQL
                ResultSet rs = stmt.executeQuery(sql);//创建数据对象
                System.out.println("电话"+"\t"+"地址");
                while (rs.next()){
                    System.out.println("有输出");
                    System.out.print(rs.getBigDecimal(1) + "\t");
                    System.out.print(rs.getString(2) + "\t");
                    returnAds = rs.getString(2);
                    System.out.println();
                }
                rs.close();
                stmt.close();
                conn.close();
            }catch(Exception e){
                e.printStackTrace();
            }
            return returnAds;
        }
    }

    class AddcCustomerToMySql implements Callable<Boolean>{
        String phoneNum;
        String address;
        int rs;
        AddcCustomerToMySql(String phoneNum, String address){
            this.phoneNum = phoneNum;
            this.address = address;
        }
        public Boolean call(){
            try{
                Class.forName("com.mysql.jdbc.Driver");
                String url="jdbc:mysql://119.29.200.140/userdata?useUnicode=true&amp;characterEncoding=UTF-8&amp";    //JDBC的URL?useUnicode=true&characterEncoding=utf8
                Connection conn;
                conn = DriverManager.getConnection(url,"root","taizhou8");
                Statement stmt = conn.createStatement(); //创建Statement对象
                System.out.println("成功连接到数据库！");
                String sql = "insert into " +locationLatLng.userName + " values (\""+ phoneNum + "\",\"" + address + "\");";    //要执行的SQL
                System.out.println(sql);
                rs = stmt.executeUpdate(sql);//创建数据对象
                stmt.close();
                conn.close();
            }catch(Exception e){
                e.printStackTrace();
            }
            return rs == 1;
        }
    }

}