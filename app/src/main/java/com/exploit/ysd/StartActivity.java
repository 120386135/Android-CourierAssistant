package com.exploit.ysd;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Color;
import android.graphics.drawable.AnimationDrawable;
import android.media.Image;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ListView;

import android.widget.TextView;
import android.widget.Toast;

import com.baidu.navisdk.adapter.BNOuterTTSPlayerCallback;
import com.baidu.navisdk.adapter.BNRoutePlanNode;
import com.baidu.navisdk.adapter.BNRoutePlanNode.CoordinateType;

import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.baidu.mapapi.SDKInitializer;

import com.baidu.navisdk.adapter.BNOuterLogUtil;
import com.baidu.navisdk.adapter.BNaviSettingManager;
import com.baidu.navisdk.adapter.BaiduNaviManager;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;

import java.util.LinkedList;
import java.util.List;

import android.os.Handler;


/**
 * Created by zhongtai on 2016/7/6.
 */
public class StartActivity extends Activity {

    public static List<Activity> activityList = new LinkedList<>();
    private static final String APP_FOLDER_NAME = "YSD";
    private String mSDCardPath = null;
    public static final String ROUTE_PLAN_NODE = "routePlanNode";

    private static final String LTAG = MainActivity.class.getSimpleName();
    private String strDes;
    private TextView distanceTitle;
    private ArrayList<Data> dataArrayListOrdered;
    private ArrayList<Data> dataArrayListOrderedCopy;
    private NewStartListAdapter startListAdapter;
    private int numOfNextPlace = 1 ;
    private ListView mListView;

    private Data myLocation;

    private boolean hadCalled = false;//已经打过下个地点的订单电话了为true


    // 定位相关
    LocationClient mLocClient;
    public MyLocationListenner myListener = new MyLocationListenner();
    boolean isFirstLoc = true; // 是否首次定位

    /**
     * 构造广播监听类，监听 SDK key 验证以及网络异常广播
     */
    public class SDKReceiver extends BroadcastReceiver {

        public void onReceive(Context context, Intent intent) {
            String s = intent.getAction();
            Log.d(LTAG, "action: " + s);
            TextView text = (TextView) findViewById(R.id.tv_title);
            text.setTextColor(Color.RED);
            if (s.equals(SDKInitializer.SDK_BROADTCAST_ACTION_STRING_PERMISSION_CHECK_ERROR)) {
                text.setText("key 验证出错! 错误码 :" + intent.getIntExtra
                        (SDKInitializer.SDK_BROADTCAST_INTENT_EXTRA_INFO_KEY_ERROR_CODE, 0)
                        + " ; 请在 AndroidManifest.xml 文件中检查 key 设置");
            } else if (s.equals(SDKInitializer.SDK_BROADTCAST_ACTION_STRING_PERMISSION_CHECK_OK)) {
                text.setText("key 验证成功! 功能可以正常使用");
                text.setTextColor(Color.YELLOW);
            } else if (s.equals(SDKInitializer.SDK_BROADCAST_ACTION_STRING_NETWORK_ERROR)) {
                text.setText("网络出错");
            }
        }
    }

    private SDKReceiver mReceiver;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_start);

        mListView = (ListView) findViewById(R.id.listView);

        distanceTitle = (TextView) findViewById(R.id.tv_title);


        dataArrayListOrdered = (ArrayList<Data>) getIntent().getSerializableExtra("order");
        dataArrayListOrderedCopy = dataArrayListOrdered;
        Data finalPlace = new Data("", "起始位置", "");
        finalPlace.setLng(dataArrayListOrdered.get(0).getLng());
        finalPlace.setLat(dataArrayListOrdered.get(0).getLat());
        finalPlace.setType();
        dataArrayListOrdered.add(finalPlace);
        for(int i = 0; i < 3; i++){
            Data data = new Data("", "", "");
            data.setType();
            dataArrayListOrdered.add(data);
        }
        strDes = (dataArrayListOrdered.get(numOfNextPlace)).getLatLng();

        startListAdapter = new NewStartListAdapter(this, dataArrayListOrdered);
        mListView.setAdapter(startListAdapter);

        mListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> arg0, View v, int index,
                                    long arg3) {
                onListItemClick(index);
            }
        });
        // 注册 SDK 广播监听者
        IntentFilter iFilter = new IntentFilter();
        iFilter.addAction(SDKInitializer.SDK_BROADTCAST_ACTION_STRING_PERMISSION_CHECK_OK);
        iFilter.addAction(SDKInitializer.SDK_BROADTCAST_ACTION_STRING_PERMISSION_CHECK_ERROR);
        iFilter.addAction(SDKInitializer.SDK_BROADCAST_ACTION_STRING_NETWORK_ERROR);
        mReceiver = new SDKReceiver();
        registerReceiver(mReceiver, iFilter);


        // 定位初始化
        myLocation = new Data();
        mLocClient = new LocationClient(getApplicationContext());
        mLocClient.registerLocationListener(myListener);
        LocationClientOption option = new LocationClientOption();
        option.setOpenGps(true); // 打开gps
        option.setCoorType("bd09ll"); // 设置坐标类型
        option.setScanSpan(1100);
        mLocClient.setLocOption(option);
        mLocClient.start();

        buttonInit();

        activityList.add(this);

        BNOuterLogUtil.setLogSwitcher(true);

        if (initDirs()) {
            initNavi();
        }

        dataArrayListOrdered.get(0).setFinish("派送中");

    }

    void buttonInit(){
        FrameLayout finishStepBtn = (FrameLayout) findViewById(R.id.finishStepBtn);
        finishStepBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (numOfNextPlace < dataArrayListOrdered.size() - 4) {
                    new AlertDialog.Builder(StartActivity.this).setTitle("确认派送下一单吗？")
                            .setPositiveButton("确定", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    // 点击“确认”后的操作
                                    dataArrayListOrdered.get(numOfNextPlace - 1).setFinish("已完成");
                                    hadCalled = false;
                                    numOfNextPlace++;
                                    dataArrayListOrdered.get(numOfNextPlace - 1).setFinish("派送中...");
                                    startListAdapter.notifyDataSetChanged();
                                    mListView.setSelectionFromTop(numOfNextPlace - 2, -1);
                                    strDes = (dataArrayListOrdered.get(numOfNextPlace)).getLatLng();
                                }
                            })
                            .setNegativeButton("返回", new DialogInterface.OnClickListener() {

                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    // 点击“返回”后的操作,这里不设置没有任何操作
                                }
                            }).show();
                }else{
                    new AlertDialog.Builder(StartActivity.this).setTitle("派送已完成")
                            .setPositiveButton("确定", null)
                            .setNegativeButton("返回", null).show();
                }


            }
        });

        FrameLayout navigationBtn = (FrameLayout) findViewById(R.id.navigationBtn);
        navigationBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (BaiduNaviManager.isNaviInited()) {
                    routeplanToNavi(CoordinateType.BD09LL);
                }
            }
        });

        ImageView backBtn = (ImageView) findViewById(R.id.start_back);
        backBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //StartActivity.this.finish();
            }
        });
    }

    void onListItemClick(final int index) {
        if (index < dataArrayListOrdered.size() - 4){
            Intent intent=new Intent();
            intent.setAction("android.intent.action.CALL");
            intent.setData(Uri.parse("tel:" + String.valueOf(dataArrayListOrdered.get(index).getPhoneNum())));
            startActivity(intent);
        }
    }


    /**
     * 定位SDK监听函数
     */
    public class MyLocationListenner implements BDLocationListener {

        @Override
        public void onReceiveLocation(BDLocation location) {
            // map view 销毁后不在处理新接收的位置
            if (location == null) {
                return;
            }
            myLocation.setLat(location.getLatitude());
            myLocation.setLng(location.getLongitude());
            String url = "http://api.map.baidu.com/routematrix/v2/walking?output=json&mcode=C4:BD:99:8D:14:55:B2:25:20:63:1E:2A:06:7F:4C:E1:71:6B:04:C6;com.exploit.ysd&ak=tmPOXuySSPlwrjO7W2OF15fw7YLZ6GYr&origins="
                    + String.valueOf(location.getLatitude()) + "," + String.valueOf(location.getLongitude()) + "&destinations=" + strDes;
            new RequestTask(url).execute();
            Log.d("startAccccc", String.valueOf(location.getLatitude()) + "///" + String.valueOf(location.getLongitude()));
        }

    }

    @Override
    protected void onPause() {
        super.onPause();
    }

    @Override
    protected void onResume() {
        super.onResume();
    }

    @Override
    protected void onDestroy() {
        // 退出时销毁定位
        mLocClient.stop();
        super.onDestroy();
        unregisterReceiver(mReceiver);
    }


    private class RequestTask extends AsyncTask<Void, Void, String> {
        private String url;


        public RequestTask(String stUrl) {
            url = stUrl;
        }

        @Override
        protected String doInBackground(Void... params) {

            return RequestData(url);
        }

        @Override
        protected void onPostExecute(String result) {
            super.onPostExecute(result);
            if (result != null) {
                JSONObject object = null;
                try {
                    object = new JSONObject(result);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                int status = object.optInt("status");
                if (status == 0) {
                    JSONArray resultArray = object.optJSONArray("result");
                    JSONObject resultObj = (JSONObject) resultArray.opt(0);
                    JSONObject disObj = resultObj.optJSONObject("distance");
                    int dis = disObj.optInt("value");
                    distanceTitle.setText("距离下一地点：" + String.valueOf(dis) + "m");
                    if (dis < 500 && !hadCalled){
                        hadCalled = true;
                        Intent intent=new Intent();
                        intent.setAction("android.intent.action.CALL");
                        intent.setData(Uri.parse("tel:" + String.valueOf(dataArrayListOrdered.get(numOfNextPlace).getPhoneNum())));
                        if(numOfNextPlace!=(dataArrayListOrdered.size()-4))
                            startActivity(intent);
                    }
                    Log.d("resultJson2222", result);
                } else {
                }
            }
        }

        public String RequestData(String url) {
            HttpGet get = new HttpGet(url);
            HttpClient client = new DefaultHttpClient();
            StringBuilder builder = null;
            String result = null;
            try {
                HttpResponse response = client.execute(get);
                if (response.getStatusLine().getStatusCode() == 200) {
                    InputStream inputStream = response.getEntity().getContent();
                    BufferedReader reader = new BufferedReader(
                            new InputStreamReader(inputStream));
                    builder = new StringBuilder();
                    String s = null;
                    for (s = reader.readLine(); s != null; s = reader.readLine()) {
                        builder.append(s);
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
            try{
                result = builder.toString();
            }catch (NullPointerException e){
                e.printStackTrace();
            }
            return result;
        }

    }

    private boolean initDirs() {
        mSDCardPath = getSdcardDir();
        if (mSDCardPath == null) {
            return false;
        }
        File f = new File(mSDCardPath, APP_FOLDER_NAME);
        if (!f.exists()) {
            try {
                f.mkdir();
            } catch (Exception e) {
                e.printStackTrace();
                return false;
            }
        }
        return true;
    }

    String authinfo = null;

    /**
     * 内部TTS播报状态回传handler
     */
    private Handler ttsHandler = new Handler() {
        public void handleMessage(Message msg) {
            int type = msg.what;
            switch (type) {
                case BaiduNaviManager.TTSPlayMsgType.PLAY_START_MSG: {
                    //showToastMsg("Handler : TTS play start");
                    break;
                }
                case BaiduNaviManager.TTSPlayMsgType.PLAY_END_MSG: {
                    //showToastMsg("Handler : TTS play end");
                    break;
                }
                default :
                    break;
            }
        }
    };

    /**
     * 内部TTS播报状态回调接口
     */
    private BaiduNaviManager.TTSPlayStateListener ttsPlayStateListener = new BaiduNaviManager.TTSPlayStateListener() {

        @Override
        public void playEnd() {
//            showToastMsg("TTSPlayStateListener : TTS play end");
        }

        @Override
        public void playStart() {
//            showToastMsg("TTSPlayStateListener : TTS play start");
        }
    };

    public void showToastMsg(final String msg) {
        StartActivity.this.runOnUiThread(new Runnable() {

            @Override
            public void run() {
                Toast.makeText(StartActivity.this, msg, Toast.LENGTH_SHORT).show();
            }
        });
    }

    private void initNavi() {

        BNOuterTTSPlayerCallback ttsCallback = null;

        BaiduNaviManager.getInstance().init(this, mSDCardPath, APP_FOLDER_NAME, new BaiduNaviManager.NaviInitListener() {
            @Override
            public void onAuthResult(int status, String msg) {
                if (0 == status) {
                    authinfo = "key校验成功!";
                } else {
                    authinfo = "key校验失败, " + msg;
                }
                /*
                StartActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        //Toast.makeText(StartActivity.this, authinfo, Toast.LENGTH_LONG).show();
                    }
                });
                */
            }

            public void initSuccess() {
                //Toast.makeText(StartActivity.this, "百度导航引擎初始化成功", Toast.LENGTH_SHORT).show();
                initSetting();
            }

            public void initStart() {
                //Toast.makeText(StartActivity.this, "百度导航引擎初始化开始", Toast.LENGTH_SHORT).show();
            }

            public void initFailed() {
                //Toast.makeText(StartActivity.this, "百度导航引擎初始化失败", Toast.LENGTH_SHORT).show();
            }


        },  null, ttsHandler, null);

    }

    private String getSdcardDir() {
        if (Environment.getExternalStorageState().equalsIgnoreCase(Environment.MEDIA_MOUNTED)) {
            return Environment.getExternalStorageDirectory().toString();
        }
        return null;
    }

    private void routeplanToNavi(CoordinateType coType) {
        Data nextPlace = dataArrayListOrdered.get(numOfNextPlace);
        BNRoutePlanNode sNode = null;
        BNRoutePlanNode eNode = null;
        sNode = new BNRoutePlanNode(myLocation.getLng(), myLocation.getLat(), "我的位置", null, coType);
        eNode = new BNRoutePlanNode(nextPlace.getLng(), nextPlace.getLat(), nextPlace.getAddress(), null, coType);
        if (sNode != null && eNode != null) {
            List<BNRoutePlanNode> list = new ArrayList<BNRoutePlanNode>();
            list.add(sNode);
            list.add(eNode);
            BaiduNaviManager.getInstance().launchNavigator(this, list, 1, true, new DemoRoutePlanListener(sNode));
        }
    }

    public class DemoRoutePlanListener implements BaiduNaviManager.RoutePlanListener {

        private BNRoutePlanNode mBNRoutePlanNode = null;

        public DemoRoutePlanListener(BNRoutePlanNode node) {
            mBNRoutePlanNode = node;
        }

        @Override
        public void onJumpToNavigator() {
			/*
			 * 设置途径点以及resetEndNode会回调该接口
			 */

            for (Activity ac : activityList) {

                if (ac.getClass().getName().endsWith("BNDemoGuideActivity")) {

                    return;
                }
            }
            Intent intent = new Intent(StartActivity.this, BNDemoGuideActivity.class);
            Bundle bundle = new Bundle();
            bundle.putSerializable(ROUTE_PLAN_NODE, mBNRoutePlanNode);
            intent.putExtras(bundle);
            startActivity(intent);

        }

        @Override
        public void onRoutePlanFailed() {
            // TODO Auto-generated method stub
            Toast.makeText(StartActivity.this, "算路失败", Toast.LENGTH_SHORT).show();
        }
    }

    private void initSetting(){
        BNaviSettingManager.setDayNightMode(BNaviSettingManager.DayNightMode.DAY_NIGHT_MODE_DAY);
        BNaviSettingManager.setShowTotalRoadConditionBar(BNaviSettingManager.PreViewRoadCondition.ROAD_CONDITION_BAR_SHOW_ON);
        BNaviSettingManager.setVoiceMode(BNaviSettingManager.VoiceMode.Veteran);
        BNaviSettingManager.setPowerSaveMode(BNaviSettingManager.PowerSaveMode.DISABLE_MODE);
        BNaviSettingManager.setRealRoadCondition(BNaviSettingManager.RealRoadCondition.NAVI_ITS_ON);
    }

    private BNOuterTTSPlayerCallback mTTSCallback = new BNOuterTTSPlayerCallback() {

        @Override
        public void stopTTS() {
            // TODO Auto-generated method stub
            Log.e("test_TTS", "stopTTS");
        }

        @Override
        public void resumeTTS() {
            // TODO Auto-generated method stub
            Log.e("test_TTS", "resumeTTS");
        }

        @Override
        public void releaseTTSPlayer() {
            // TODO Auto-generated method stub
            Log.e("test_TTS", "releaseTTSPlayer");
        }

        @Override
        public int playTTSText(String speech, int bPreempt) {
            // TODO Auto-generated method stub
            Log.e("test_TTS", "playTTSText" + "_" + speech + "_" + bPreempt);

            return 1;
        }

        @Override
        public void phoneHangUp() {
            // TODO Auto-generated method stub
            Log.e("test_TTS", "phoneHangUp");
        }

        @Override
        public void phoneCalling() {
            // TODO Auto-generated method stub
            Log.e("test_TTS", "phoneCalling");
        }

        @Override
        public void pauseTTS() {
            // TODO Auto-generated method stub
            Log.e("test_TTS", "pauseTTS");
        }

        @Override
        public void initTTSPlayer() {
            // TODO Auto-generated method stub
            Log.e("test_TTS", "initTTSPlayer");
        }

        @Override
        public int getTTSState() {
            // TODO Auto-generated method stub
            Log.e("test_TTS", "getTTSState");
            return 1;
        }
    };




}