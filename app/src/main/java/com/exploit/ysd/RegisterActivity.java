package com.exploit.ysd;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.concurrent.Callable;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

/**
 * Created by Administrator on 2016/9/21.
 */
public class RegisterActivity extends Activity {
    private EditText userNameEdit;
    private EditText passwordEdit;
    private EditText confirmPasswordEdit;
    @Override
    protected void onCreate(Bundle savedInstanceState){
        super.onCreate(savedInstanceState);
        setContentView(R.layout.register_activity);
        userNameEdit = (EditText) findViewById(R.id.register_userName);
        passwordEdit = (EditText) findViewById(R.id.register_password);
        confirmPasswordEdit = (EditText) findViewById(R.id.register_comfirm_password);
        TextView backBtn = (TextView) findViewById(R.id.register_back);
        backBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                RegisterActivity.this.finish();
            }
        });
        TextView registerBtn = (TextView) findViewById(R.id.register_btn);
        registerBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (passwordEdit.getText().toString().equals(confirmPasswordEdit.getText().toString()) ){
                    DuplicateChecking checking = new DuplicateChecking(userNameEdit.getText().toString());
                    ExecutorService serviceChecking = Executors.newSingleThreadExecutor();
                    Future<Boolean> futureChecking = serviceChecking.submit(checking);
                    try{
                        if (futureChecking.get())
                        {
                            RegisterQuery task = new RegisterQuery(userNameEdit.getText().toString(), passwordEdit.getText().toString());
                            ExecutorService service = Executors.newSingleThreadExecutor();
                            Future<Boolean> future = service.submit(task);
                            try{
                                if (future.get()){
                                    CreateTable createTableTask = new CreateTable(userNameEdit.getText().toString());
                                    ExecutorService service1 = Executors.newSingleThreadExecutor();
                                    Future<Boolean> future1 = service1.submit(createTableTask);
                                    if (future1.get()){
                                        Intent intent = new Intent();
                                        intent.putExtra("userName", userNameEdit.getText().toString());
                                        setResult(RESULT_OK, intent);
                                        RegisterActivity.this.finish();
                                    }else{
                                        Toast.makeText(RegisterActivity.this, "注册失败", 0).show();
                                    }

                                }else{
                                    Toast.makeText(RegisterActivity.this, "注册失败", 0).show();
                                }
                            }catch (Exception e){
                                e.printStackTrace();
                            }
                        }else {
                            Toast.makeText(RegisterActivity.this, "用户名已存在", 0).show();
                        }
                    }catch (Exception e){

                    }


                }

            }
        });
    }


    class RegisterQuery implements Callable<Boolean> {
        String id;
        String password;
        int returnCount ;
        RegisterQuery(String userName, String password){
            this.id = userName;
            this.password = password;
        }
        public Boolean call(){
            try{
                Class.forName("com.mysql.jdbc.Driver");
                String url="jdbc:mysql://119.29.200.140/userdb?useUnicode=true&amp;characterEncoding=UTF-8&amp";    //JDBC的URL?useUnicode=true&characterEncoding=utf8
                Connection conn;
                conn = DriverManager.getConnection(url,"root","taizhou8");
                Statement stmt = conn.createStatement(); //创建Statement对象
                System.out.println("成功连接到数据库！");
                String sql = "insert into user values(\""+id+"\", \""+ password + "\");";//要执行的SQL
                returnCount = stmt.executeUpdate(sql);//创建数据对象
                stmt.close();
                conn.close();
            }catch(Exception e){
                e.printStackTrace();
            }
            return returnCount == 1;
        }
    }


    class DuplicateChecking implements Callable<Boolean> {
        String id;
        String returnPassword = "";
        DuplicateChecking(String userName){
            this.id = userName;
        }
        public Boolean call(){
            try{
                Class.forName("com.mysql.jdbc.Driver");
                String url="jdbc:mysql://119.29.200.140/userdb?useUnicode=true&amp;characterEncoding=UTF-8&amp";    //JDBC的URL?useUnicode=true&characterEncoding=utf8
                Connection conn;
                conn = DriverManager.getConnection(url,"root","taizhou8");
                Statement stmt = conn.createStatement(); //创建Statement对象
                System.out.println("成功连接到数据库！");
                String sql = "select * from user where id=" + "\"" + id + "\"";    //要执行的SQL
                ResultSet rs = stmt.executeQuery(sql);//创建数据对象
                while (rs.next()){
                    returnPassword = rs.getString(2);
                    System.out.println(rs.getString(2));
                }
                rs.close();
                stmt.close();
                conn.close();
            }catch(Exception e){
                e.printStackTrace();
            }
            return returnPassword.length() <= 1;
        }
    }

    class CreateTable implements Callable<Boolean> {
        String id;
        int rs;
        String returnPassword = "";
        CreateTable(String userName){
            this.id = userName;
        }
        public Boolean call(){
            try{
                Class.forName("com.mysql.jdbc.Driver");
                String url="jdbc:mysql://119.29.200.140/userdata?useUnicode=true&amp;characterEncoding=UTF-8&amp";    //JDBC的URL?useUnicode=true&characterEncoding=utf8
                Connection conn;
                conn = DriverManager.getConnection(url,"root","taizhou8");
                Statement stmt = conn.createStatement(); //创建Statement对象
                System.out.println("成功连接到数据库！");
                String sql = "create table "+id+" (phonenum varchar(11), address varchar(60)) default charset utf8;";    //要执行的SQL
                System.out.println(sql);
                rs = stmt.executeUpdate(sql);//创建数据对象
                stmt.close();
                conn.close();
            }catch(Exception e){
                e.printStackTrace();
            }
            return true;
        }
    }


}
