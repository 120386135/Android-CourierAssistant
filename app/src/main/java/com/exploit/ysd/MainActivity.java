package com.exploit.ysd;

import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.baidu.mapapi.SDKInitializer;
import org.apache.http.client.HttpClient;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import org.apache.http.HttpResponse;

import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;

public class MainActivity extends AppCompatActivity {
    private static final String LTAG = MainActivity.class.getSimpleName();
    private SDKReceiver mReceiver;
    private ImageView iv_menu;
    private ImageView login;
    private ImageButton startBtn;
    private PopupMenu popupMenu;
    private ArrayList dataArrayList;
    private ArrayList disArray;
    private boolean neverManualAdd;//从未手动添加时为true，添加订单后变为false
    private boolean secondManualAdd;
    private boolean neverSystemAdd;//从未系统添加时为true，添加订单后变为false
    private boolean socketInCommunication;//正在soket通讯中
    private boolean neverStart;
    Socket socket = null;
    String returnResult = "";
    ListView mListView;
    ListAdapter mListAdapter;
    CustomProgressDialog lodingDialog;



    Data[] data = {new Data("15918790317", "广州市天河区华南理工大学自动化科学与工程学院", "广州市"),
            new Data("15918790317", "广州市天河区燕岭路633号天河客运站", "广州市"),
            new Data("15918790317", "广州市珠江东路4号广州图书馆", "广州市"),
            new Data("15918790317", "广州市天河区五山路483号华南农业大学嵩山区43A栋", "广州市"),
            new Data("15918790317", "广州市天河区粤垦路533号", "广州市"),
            new Data("15918790317", "广州市天河区东莞庄路富力院士庭广场2楼", "广州市"),
            new Data("15918790317", "广州市天河区华南理工大学内西湖畔西湖苑宾馆", "广州市"),
            new Data("15918790317", "广州市天河区华师地铁A口", "广州市"),
            new Data("15918790317", "广州市天河区华南农业大学雲来斯登西饼店", "广州市"),
            new Data("15918790317", "广州市天河区华南师范大学中区教工宿舍8栋", "广州市"),
            new Data("15918790317", "广州市天河区银定塘后街108", "广州市")};
    /**
     * 构造广播监听类，监听 SDK key 验证以及网络异常广播
     */
    public class SDKReceiver extends BroadcastReceiver {

        public void onReceive(Context context, Intent intent) {
            String s = intent.getAction();
            Log.d(LTAG, "action: " + s);
            TextView text = (TextView) findViewById(R.id.tv_title);
            text.setTextColor(Color.RED);
            if (s.equals(SDKInitializer.SDK_BROADTCAST_ACTION_STRING_PERMISSION_CHECK_ERROR)) {
                text.setText("key 验证出错! 错误码 :" + intent.getIntExtra
                        (SDKInitializer.SDK_BROADTCAST_INTENT_EXTRA_INFO_KEY_ERROR_CODE, 0)
                        +  " ; 请在 AndroidManifest.xml 文件中检查 key 设置");
            } else if (s.equals(SDKInitializer.SDK_BROADTCAST_ACTION_STRING_PERMISSION_CHECK_OK)) {
                text.setText("key 验证成功! 功能可以正常使用");
                text.setTextColor(Color.YELLOW);
            } else if (s.equals(SDKInitializer.SDK_BROADCAST_ACTION_STRING_NETWORK_ERROR)) {
                text.setText("网络出错");
            }
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //在使用SDK各组件之前初始化context信息，传入ApplicationContext
        //注意该方法要再setContentView方法之前实现
        SDKInitializer.initialize(getApplication());
        setContentView(R.layout.activity_main);

        neverManualAdd = true;
        secondManualAdd = false;
        neverSystemAdd = true;
        socketInCommunication = false;
        neverStart = true;
        disArray = new ArrayList();
        dataArrayList = new ArrayList();

        mListView = (ListView) findViewById(R.id.listView);
        mListAdapter = new ListAdapter(this, R.layout.list_item_view, dataArrayList);
        mListView.setAdapter(mListAdapter);
        mListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> arg0, View v, int index,
                                    long arg3) {
                onListItemClick(index);
            }
        });

        // 注册 SDK 广播监听者
        IntentFilter iFilter = new IntentFilter();
        iFilter.addAction(SDKInitializer.SDK_BROADTCAST_ACTION_STRING_PERMISSION_CHECK_OK);
        iFilter.addAction(SDKInitializer.SDK_BROADTCAST_ACTION_STRING_PERMISSION_CHECK_ERROR);
        iFilter.addAction(SDKInitializer.SDK_BROADCAST_ACTION_STRING_NETWORK_ERROR);
        mReceiver = new SDKReceiver();
        registerReceiver(mReceiver, iFilter);

        popupMenu();
        buttonInit();
    }

    void buttonInit(){
        startBtn = (ImageButton) findViewById(R.id.startBtn);
        startBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //如手动添加了就要按另一种方式，计算最后一次添加地点与前面地点之间的距离
                if(!neverManualAdd){
                    ArrayList desArray = new ArrayList();
                    for (int j = 0; j < dataArrayList.size() - 1; j++)
                        desArray.add(((Data) dataArrayList.get(j)).getLatLng());
                    String st = getRouteDistancUrl(((Data) dataArrayList.get(dataArrayList.size() - 1)).getLatLng(), desArray);
                    new RequestTask(dataArrayList.size() - 1, st, (Data) dataArrayList.get(0), disArray).execute();
                }
                if(neverStart && dataArrayList.size() > 3){
                    lodingDialog =new CustomProgressDialog(MainActivity.this, "正在规划中",R.anim.frame2);
                    lodingDialog.show();
                    //开始定时监视距离是否计算完毕
                    if (finishCDTimerTask != null && finishCDTimerTask != null)
                        finishCountDistance.schedule(finishCDTimerTask, 100, 100);
                    neverStart = false;
                }
            }
        });

        login = (ImageView) findViewById(R.id.iv_login);
        login.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v){
                //Toast.makeText(MainActivity.this, "敬请期待", 0).show();

                //new RequestTask(" ").execute();
                //Log.d("Mystatus111", ((Data) dataArrayList.get(dataArrayList.size() - 1)).getLatLng());

                for (int i = 0; i < disArray.size(); i++){
                    Log.d("sfhls", ((Distance) disArray.get(i)).getX() + "到" + ((Distance) disArray.get(i)).getY()+ "distance:" + ((Distance) disArray.get(i)).getDistance());
                }

                for(int i = 0; i < 11; i++){
                    Log.d("flsjfl", ((Data) dataArrayList.get(i)).getAddress() + ((Data) dataArrayList.get(i)).getLatLng());
                }
            }
        });

    }

    void popupMenu(){
        popupMenu = new PopupMenu(this);
        iv_menu = (ImageView) findViewById(R.id.iv_menu);
        iv_menu.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                popupMenu.showLocation(R.id.iv_menu);// 设置弹出菜单弹出的位置
                // 设置回调监听，获取点击事件
                popupMenu.setOnItemClickListener(new PopupMenu.OnItemClickListener() {

                    @Override
                    public void onClick(PopupMenu.MENUITEM item, String str) {
                        if(str == "系统导入"){
                            if (neverSystemAdd){
                                neverSystemAdd = false;
                                dataArrayList.clear();
                                disArray.clear();
                                String st1 = "";
                                for(int i = 0; i < 11; i++){
                                    dataArrayList.add(data[i]);
                                    st1 = getGeocoderUrl(data[i].getAddress(), data[i].getCity());
                                    new RequestTask(-1, st1, (Data) dataArrayList.get(i), disArray).execute();
                                }
                                mListAdapter.notifyDataSetChanged();
                                if(mTimer != null && mTimerTask != null)
                                    mTimer.schedule(mTimerTask, 100, 100);
                            }
                        }

                        // TODO Auto-generated method stub
                        if (str == "手动添加") {
                            if(neverManualAdd){
                                disArray.clear();
                                dataArrayList.clear();
                                mListAdapter.notifyDataSetChanged();
                            }
                            //获取自定义AlertDialog布局文件的view
                            LinearLayout myDialog = (LinearLayout) getLayoutInflater()
                                    .inflate(R.layout.activity_dialog, null);
                            //由于EditText要在内部类中对其进行操作，所以要加上final
                            final EditText phoneNumEidt = (EditText) myDialog.findViewById(R.id.phoneNumEdit);
                            final EditText addressEdit = (EditText) myDialog.findViewById(R.id.addressEdit);

                            new AlertDialog.Builder(MainActivity.this)
                                    .setView(myDialog)
                                    .setNegativeButton("添加", new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {
                                            //将Activity中的textview显示AlertDialog中EditText中的内容
                                            //并且用Toast显示一下
                                            dataArrayList.add(new Data(phoneNumEidt.getText().toString(), addressEdit.getText().toString(), "北京市"));

                                            //刚添加进来的地点位置转换为坐标
                                            int index = dataArrayList.size() - 1;
                                            String url = getGeocoderUrl(((Data) dataArrayList.get(index)).getAddress(),
                                                    ((Data) dataArrayList.get(index)).getCity());
                                            new RequestTask(-1, url, (Data) dataArrayList.get(index), disArray).execute();


                                            if (secondManualAdd){
                                                //计算上一次添加进来的地点与之前地点之间的距离
                                                    ArrayList desArray = new ArrayList();
                                                    for (int j = 0; j < dataArrayList.size() - 2; j++)
                                                        desArray.add(((Data) dataArrayList.get(j)).getLatLng());
                                                    String st = getRouteDistancUrl(((Data) dataArrayList.get(index-1)).getLatLng(), desArray);
                                                    new RequestTask(index, st, (Data) dataArrayList.get(0), disArray).execute();
                                            }
                                            if(!neverManualAdd)
                                                secondManualAdd = true;
                                            //忽略第一次添加就计算上一次添加进来的地点与之前地点之间的距离
                                            //所以点击开始配送前需要在计算一次上一次添加进来的地点。。。。。。。
                                            if (neverManualAdd)
                                                neverManualAdd = false;


                                            Toast.makeText(MainActivity.this, "添加成功！", Toast.LENGTH_SHORT).show();
                                        }
                                    }).setPositiveButton("取消", null).create().show();
                        }
                    }
                });
            }
        });
    }


    void onListItemClick(final int index) {
        //获取自定义AlertDialog布局文件的view
        LinearLayout myDialog = (LinearLayout) getLayoutInflater()
                .inflate(R.layout.activity_dialog, null);
        //由于EditText要在内部类中对其进行操作，所以要加上final
        final EditText phoneNumEidt = (EditText) myDialog.findViewById(R.id.phoneNumEdit);
        final EditText addressEdit = (EditText) myDialog.findViewById(R.id.addressEdit);

        //设置AlertDialog中TextView和EditText显示Activity中TextView的内容
        phoneNumEidt.setText(data[index].getPhoneNum());
        addressEdit.setText(data[index].getAddress());

        new AlertDialog.Builder(MainActivity.this)
                .setView(myDialog)
                .setNegativeButton("修改", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        //将Activity中的textview显示AlertDialog中EditText中的内容
                        //并且用Toast显示一下
                        data[index].setPhoneNum(phoneNumEidt.getText().toString());
                        data[index].setAddress(addressEdit.getText().toString());
                        Toast.makeText(MainActivity.this, "修改成功！", Toast.LENGTH_SHORT).show();
                    }
                }).setPositiveButton("取消", null).create().show();
    }


    @Override
    protected void onResume() {
        super.onResume();
    }
    @Override
    protected void onDestroy() {
        super.onDestroy();
        // 取消监听 SDK 广播
        unregisterReceiver(mReceiver);
    }

    private class RequestTask extends AsyncTask<Void, Void, String> {
        private String url;
        private Data mData;
        private int mIndex;
        private ArrayList mDisArray;

        public RequestTask(int index, String stUrl, Data data, ArrayList stdisArray){
            url = stUrl;
            mData = data;
            mIndex = index;
            mDisArray = stdisArray;
        }

        @Override
        protected String doInBackground(Void... params) {

            return RequestData(url);
        }

        @Override
        protected void onPostExecute(String result) {


            super.onPostExecute(result);
            if (result != null) {

                if(mIndex == -1)
                    latLngAnalysis(result, mData);
                else
                    distanceAnalysis(result, mDisArray, mIndex);

                Log.d("resultJson", result);
            } else if (result == null) {
                Toast.makeText(MainActivity.this, "��������ʧ��", Toast.LENGTH_LONG)
                        .show();
            }
        }
    }

    public String RequestData(String url) {
        HttpGet get = new HttpGet(url);
        HttpClient client = new DefaultHttpClient();
        StringBuilder builder = null;
        try {
            HttpResponse response = client.execute(get);
            if (response.getStatusLine().getStatusCode() == 200) {
                InputStream inputStream = response.getEntity().getContent();
                BufferedReader reader = new BufferedReader(
                        new InputStreamReader(inputStream));
                builder = new StringBuilder();
                String s = null;
                for (s = reader.readLine(); s != null; s = reader.readLine()) {
                    builder.append(s);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return builder.toString();
    }

    public void latLngAnalysis(String result, Data data) {
        JSONObject object = null;
        try {
            object = new JSONObject(result);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        int status = object.optInt("status");
        if(status == 0){
            JSONObject ObjectInfo = object.optJSONObject("result");
            JSONObject resultObject = ObjectInfo.optJSONObject("location");
            data.setLat(resultObject.optDouble("lat"));
            data.setLng(resultObject.optDouble("lng"));
        }else{
            Log.d("MyStatus", "geocoder status wrong");
        }
    }

    public void distanceAnalysis(String result, ArrayList disArray, int index){
        JSONObject object = null;
        try {
            object = new JSONObject(result);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        int status = object.optInt("status");
        if(status == 0){
            JSONArray resultArray = object.optJSONArray("result");
            if(index <= 10){
                for(int i = 0; i < resultArray.length(); i++){
                    JSONObject resultObj = (JSONObject)resultArray.opt(i);
                    JSONObject disObj = resultObj.optJSONObject("distance");
                    int dis = disObj.optInt("value");
                    Distance distanceTmp = new Distance();
                    distanceTmp.setDistance(index, index + i + 1, dis);
                    disArray.add(distanceTmp);
                }
            }else {
                for(int i = 0; i < resultArray.length(); i++){
                    JSONObject resultObj = (JSONObject)resultArray.opt(i);
                    JSONObject disObj = resultObj.optJSONObject("distance");
                    int dis = disObj.optInt("value");
                    Distance distanceTmp = new Distance();
                    distanceTmp.setDistance(index, i + 1, dis);
                    disArray.add(distanceTmp);
                }
            }


        }else{
            Log.d("MyStatus", "route maxtir status wrong");
        }

    }

    public String getGeocoderUrl(String address, String city) {
        return "http://api.map.baidu.com/geocoder/v2/?ak=44QymWg19i3vLa2VNE6sWpR8iUgx69o2&mcode=C4:BD:99:8D:14:55:B2:25:20:63:1E:2A:06:7F:4C:E1:71:6B:04:C6;com.exploit.ysd&output=json&address="
        + address + "&city=" + city;
    }

    public String getRouteDistancUrl(String origin, ArrayList destination){
        String strDes = "";
        for(int i = 0; i < destination.size(); i++){
            if(i == destination.size() - 1)
                strDes = strDes + destination.get(i);
            else
                strDes = strDes + destination.get(i) + "%7C";
        }
        return "http://api.map.baidu.com/routematrix/v2/walking?output=json&mcode=C4:BD:99:8D:14:55:B2:25:20:63:1E:2A:06:7F:4C:E1:71:6B:04:C6;com.exploit.ysd&ak=B5ArGW18KWx45YKqEe53sD29sGqcDpdB&origins="
                + origin + "&destinations=" + strDes;
    }


    class MyThread extends Thread {

        public String strDisArray;

        public MyThread(String str) {
            strDisArray = str;
        }

        @Override
        public void run() {
            //定义消息
            Message msg = new Message();
            msg.what = 0x11;
            Bundle bundle = new Bundle();
            bundle.clear();
            try {
                //连接服务器 并设置连接超时为5秒
                socket = new Socket();
                socket.connect(new InetSocketAddress("119.29.200.140", 8877), 5000);
                //获取输入输出流
                OutputStream ou = socket.getOutputStream();
                //向服务器发送信息
                ou.write(strDisArray.getBytes());
                ou.flush();

                BufferedReader bff = new BufferedReader(new InputStreamReader(
                        socket.getInputStream()));


                /*为什么这样就是不可以，好像是线程崩溃了
                 String line;
                while ( !((line = bff.readLine()) == null) ) {
                    buffer = buffer + line;
                }
                */
                returnResult = returnResult + bff.readLine();
                Log.d("fsfhkh", returnResult);
                bundle.putString("msg", returnResult.toString());
                msg.setData(bundle);
                //关闭各种输入输出流
                bff.close();
                ou.close();
                socket.close();
            } catch (SocketTimeoutException aa) {
                //连接超时 在UI界面显示消息
                bundle.putString("msg", "服务器连接失败！请检查网络是否打开");
                msg.setData(bundle);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }


    Timer mTimer = new Timer();
    TimerTask mTimerTask = new TimerTask() {
        @Override
        public void run() {
            boolean latLngFinish = true;
            for (int i = 0; i < dataArrayList.size(); i++){
                if (((Data) dataArrayList.get(i)).getLng() <= 1.0){
                    latLngFinish = false;
                }
            }

            if (latLngFinish){
                //初始化计算data数据的距离
                for (int i = 0; i < 10; i++) {
                    ArrayList desArray = new ArrayList();
                    for (int j = i + 1; j < 11; j++){
                        desArray.add(data[j].getLatLng());
                        Log.d("ddfjsf", data[j].getLatLng());
                    }
                    String st = getRouteDistancUrl(data[i].getLatLng(), desArray);
                    new RequestTask(i + 1, st, (Data) dataArrayList.get(i), disArray).execute();
                }
                if(mTimer != null) {
                    mTimer.cancel();
                    mTimer = null;
                }
                if (mTimerTask != null){
                    mTimerTask.cancel();
                    mTimerTask = null;
                }
            }
        }
    };

    Timer judgeSoketReturn = new Timer();
    TimerTask judgeSoketReturnTask = new TimerTask() {
        @Override
        public void run() {
            if (returnResult != ""){
                socketInCommunication = false;
                JSONObject object = null;
                try {
                    object = new JSONObject(returnResult);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                JSONArray resultArray = object.optJSONArray("order");
                ArrayList orderArrayList = new ArrayList();
                int index;
                for (int i = 0; i < resultArray.length(); i++){
                    index = resultArray.optInt(i);
                    Log.d("orderArrayList", String.valueOf(index));
                    orderArrayList.add((Data) dataArrayList.get(index));
                }

                Intent intent = new Intent();
                intent.putExtra("order", orderArrayList);
                intent.setClass(MainActivity.this, StartActivity.class);
                MainActivity.this.startActivity(intent);
                lodingDialog.dismiss();
                returnResult = "";
                neverStart = true;
                if (judgeSoketReturn != null){
                    judgeSoketReturn.cancel();
                    judgeSoketReturn = null;
                }
                if(judgeSoketReturnTask != null){
                    judgeSoketReturnTask.cancel();
                    judgeSoketReturnTask = null;
                }
            }
        }
    };

    Timer finishCountDistance = new Timer();
    TimerTask finishCDTimerTask = new TimerTask() {
        @Override
        public void run() {
            if(!socketInCommunication && (disArray.size() == dataArrayList.size()*(dataArrayList.size()-1)/2)
                    && (disArray.size() != 0)){
                socketInCommunication = true;
                JSONObject jsonObject = new JSONObject();
                JSONArray disJsonArray = new JSONArray();
                try{
                    if((neverManualAdd) ){
                        for(int i = 0; i < 55; i++){
                            disJsonArray.put(((Distance) disArray.get(i)).getDistance());
                        }
                        jsonObject.put("distance", disJsonArray);//将距离打包成json数据
                        Log.d("JsonDisntance", jsonObject.toString());
                    }else {//如果手动添加过，disArray里面的数据顺序是乱的，则按另一种方式打包json数据
                        for(int i = 1; i < disArray.size(); i++){
                            for (int j = i + 1; j <= disArray.size(); j++){
                                for(int m = 0; m < disArray.size(); m++){
                                    int y = ((Distance) disArray.get(m)).getY();
                                    int x = ((Distance) disArray.get(m)).getX();
                                    if((i == x && j == y)||(i == y && j == x)){
                                        disJsonArray.put(((Distance) disArray.get(m)).getDistance());
                                    }
                                }
                            }
                        }
                    }
                }catch (JSONException e){
                    e.printStackTrace();
                }
                new MyThread(jsonObject.toString()).start();//soket将距离传给服务器获取结局
                if (judgeSoketReturnTask != null && judgeSoketReturn != null)//监视结果是否返回
                    judgeSoketReturn.schedule(judgeSoketReturnTask, 100, 100);
                if (finishCountDistance != null){
                    finishCountDistance.cancel();
                    finishCountDistance = null;
                }
                if (finishCDTimerTask != null){
                    finishCDTimerTask.cancel();
                    finishCDTimerTask = null;
                }
            }
        }
    };
}