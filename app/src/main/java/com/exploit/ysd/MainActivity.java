package com.exploit.ysd;

import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.AsyncTask;
import android.os.Message;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.baidu.mapapi.SDKInitializer;
import com.exploit.ysd.view.SwipeItemLayout;
import com.exploit.ysd.view.SwipeListView;

import org.apache.http.client.HttpClient;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import org.apache.http.HttpResponse;

import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.CountDownLatch;

public class MainActivity extends AppCompatActivity {
    private static final String LTAG = MainActivity.class.getSimpleName();
    private static final String AK ="tmPOXuySSPlwrjO7W2OF15fw7YLZ6GYr";
    private static final String MCODE ="C4:BD:99:8D:14:55:B2:25:20:63:1E:2A:06:7F:4C:E1:71:6B:04:C6;com.exploit.ysd";
    private SDKReceiver mReceiver;
    private String userName;
    private ImageView iv_menu;
    private ImageView login;
    private ImageButton startBtn;
    private PopupMenu popupMenu;
    volatile private ArrayList<Data> dataArrayList;//手动添加时的订单数据
    volatile private ArrayList<Distance> disArray;//手动添加时的距离数据
    volatile private ArrayList<Data> dataArrayListSystem;//系统添加时的订单数据
    volatile private ArrayList<Distance> disArraySystem;//系统添加时的距离数据
    volatile private ArrayList<Data> listAdapterData;
    private boolean systemAdd;//添加数据是判断用
    private boolean manualAdd;//添加数据是判断用
    private boolean neverManualAdd;//从未手动添加时为true，添加订单后变为false
    private boolean locationSuccess;
    private boolean systemFirstTimeStart;//从未系统添加时为true，添加订单后变为false
    private boolean socketInCommunication;//正在soket通讯中
    private boolean neverStart;
    private String returnResult = "";
    private SwipeListView mListView;
    private SwipeAdapter mListAdapter;
    private CommProgressDialog lodingDialog;


    // 定位相关
    private Data myLocation;
    private LocationClient mLocClient;
    public MyLocationListener myListener = new MyLocationListener();

    private final Data[] data = {new Data("15918790317", "清溪镇石田路龙邦速递", "东莞市"),
            new Data("15918790317", "清溪中学", "东莞市"),
            new Data("15918790317", "清溪镇万腾洲际酒店", "东莞市"),
            new Data("15918790317", "清溪镇石田路20号银河学校", "东莞市"),
            new Data("15918790317", "清溪镇石田路46号名冠彩印有限公司", "东莞市"),
            new Data("15918790317", "清溪镇重河社区卫生服务站", "东莞市"),
            new Data("15918790317", "清溪镇凤凰花园华润超市旁", "东莞市"),
            new Data("15918790317", "清溪镇鹿鸣鹿安泰楼", "东莞市"),
            new Data("15918790317", "清溪镇年丰豪苑", "东莞市"),
            new Data("15918790317", "清溪商会大厦", "东莞市"),
            new Data("15918790317", "清溪镇银桥花园西门", "东莞市")};
    private final CountDownLatch startCountDisSysAddGate= new CountDownLatch(data.length);
    private final CountDownLatch socketReturnGate = new CountDownLatch(1);
    /**
     * 构造广播监听类，监听 SDK key 验证以及网络异常广播
     */
    public class SDKReceiver extends BroadcastReceiver {
        public void onReceive(Context context, Intent intent) {
            String s = intent.getAction();
            Log.d(LTAG, "action: " + s);
            //TextView text = (TextView) findViewById(R.id.tv_title);
            //text.setTextColor(Color.RED);
            if (s.equals(SDKInitializer.SDK_BROADTCAST_ACTION_STRING_PERMISSION_CHECK_ERROR)) {
                //text.setText("key 验证出错! 错误码 :" + intent.getIntExtra
                        //(SDKInitializer.SDK_BROADTCAST_INTENT_EXTRA_INFO_KEY_ERROR_CODE, 0)
                        //+  " ; 请在 AndroidManifest.xml 文件中检查 key 设置");
            } else if (s.equals(SDKInitializer.SDK_BROADTCAST_ACTION_STRING_PERMISSION_CHECK_OK)) {
                //text.setText("key 验证成功! 功能可以正常使用");
                //text.setTextColor(Color.YELLOW);
            } else if (s.equals(SDKInitializer.SDK_BROADCAST_ACTION_STRING_NETWORK_ERROR)) {
                //text.setText("网络出错");
            }
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        systemAdd = false;
        manualAdd = false;
        locationSuccess = false;
        socketInCommunication = false;
        systemFirstTimeStart = true;
        neverStart = true;
        neverManualAdd = true;
        disArraySystem = new ArrayList<>();
        dataArrayListSystem = new ArrayList<>();
        disArray = new ArrayList<>();
        dataArrayList = new ArrayList<>();
        listAdapterData = new ArrayList<>();

        mListView = (SwipeListView) findViewById(R.id.listView);
        mListAdapter = new SwipeAdapter(this);
        mListView.setAdapter(mListAdapter);
        mListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> arg0, View v, int index,
                                    long arg3) {
                onListItemClick(index);
            }
        });

        // 注册 SDK 广播监听者
        IntentFilter iFilter = new IntentFilter();
        iFilter.addAction(SDKInitializer.SDK_BROADTCAST_ACTION_STRING_PERMISSION_CHECK_OK);
        iFilter.addAction(SDKInitializer.SDK_BROADTCAST_ACTION_STRING_PERMISSION_CHECK_ERROR);
        iFilter.addAction(SDKInitializer.SDK_BROADCAST_ACTION_STRING_NETWORK_ERROR);
        mReceiver = new SDKReceiver();
        registerReceiver(mReceiver, iFilter);

        // 定位初始化
        myLocation = new Data();
        mLocClient = new LocationClient(getApplicationContext());
        mLocClient.registerLocationListener(myListener);
        LocationClientOption option = new LocationClientOption();
        option.setIsNeedAddress(true);
        option.setOpenGps(true); // 打开gps
        option.setCoorType("bd09ll"); // 设置坐标类型
        option.setScanSpan(1050);
        mLocClient.setLocOption(option);
        mLocClient.start();

        //添加菜单按钮初始化
        popupMenu();
        buttonInit();
    }

    /**
     * 定位SDK监听函数
     */
    public class MyLocationListener implements BDLocationListener {

        @Override
        public void onReceiveLocation(BDLocation location) {
            if (location == null) {
                return;
            }
            Log.d("ldsjhg", String.valueOf(location.getLatitude()) + "///" + String.valueOf(location.getLongitude()));

            try {
                if (location.getCity() != null && location.getAddrStr() != null){
                    mLocClient.stop();
                    Log.d("ldsjhg", location.getAddrStr() + "/////" + location.getCity());
                    locationSuccess = true;
                    myLocation.setLat(location.getLatitude());
                    myLocation.setLng(location.getLongitude());
                    //myLocation.setLng(120.34938546450);
                    //myLocation.setLat(30.322662022222);
                    myLocation.setAddress("（我的位置）" + location.getAddrStr());
                    myLocation.setCity(location.getCity());
                   // myLocation.setCity("杭州市");
                    myLocation.secquence = -1;

                    if(systemFirstTimeStart){
                        systemFirstTimeStart = false;
                        dataArrayListSystem.add(myLocation);
                        dataArrayList.add(myLocation);

                        //开始监视系统添加的数据经纬度计算是否完毕
                        new Thread(countDistanceSysAdd).start();

                        for(int i = 0; i < data.length; i++){
                            data[i].secquence = i;
                            dataArrayListSystem.add(data[i]);
                            String url = getGeocoderUrl(data[i].getAddress(), data[i].getCity());
                            new RequestTask(-1, url,  dataArrayListSystem.get(i+1), null).execute();
                        }

                    }

                }else {
                    Log.d("ldsjhg", "city null");
                }

            } catch (Exception e) {
                int err = location.getLocType();
                Log.d("ldsjhg", String.valueOf(err));
            }

            Log.d("startAccccc", String.valueOf(location.getLatitude()) + "///" + String.valueOf(location.getLongitude()));
        }
    }

    void buttonInit(){
        startBtn = (ImageButton) findViewById(R.id.startBtn);
        startBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //点击开始
                if(dataArrayList.size() <= 4 && !systemAdd )
                    Toast.makeText(MainActivity.this, "请输入至少四个地址", Toast.LENGTH_LONG).show();
                if((neverStart && (dataArrayList.size() > 4) && manualAdd)||(neverStart && (dataArrayListSystem.size() > 3) && systemAdd)){
                    neverStart = false;
                    lodingDialog =CommProgressDialog.createDialog(MainActivity.this, R.anim.default_anim);
                    lodingDialog.setMessage("正在规划中...");
                    lodingDialog.show();

                    for (Data d :dataArrayListSystem)
                    Log.d("test", d.getAddress() + "+" + d.getLatLng());
                    //开始定时监视距离是否计算完毕,计算完毕则socket连接服务器
                    if (finishCDTimerTask != null )
                        finishCountDistance.schedule(finishCDTimerTask, 100, 100);
                }
            }
        });

        login = (ImageView) findViewById(R.id.iv_login);
        login.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v){
                if (userName == null){
                    Intent intent = new Intent(MainActivity.this,LoginActivity.class);
                    startActivityForResult(intent, 3);
                }else {
                    Intent intent = new Intent(MainActivity.this, LoginSuccessActivity.class);
                    intent.putExtra("userName", userName);
                    startActivityForResult(intent, 4);
                }
            }
        });
    }

    void popupMenu(){
        popupMenu = new PopupMenu(this);
        iv_menu = (ImageView) findViewById(R.id.iv_menu);
        iv_menu.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                popupMenu.showLocation(R.id.iv_menu);// 设置弹出菜单弹出的位置
                // 设置回调监听，获取点击事件
                popupMenu.setOnItemClickListener(new PopupMenu.OnItemClickListener() {

                    @Override
                    public void onClick(PopupMenu.MENUITEM item, String str) {
                        if (str.equals("系统导入")) {
                            if (locationSuccess) {
                                systemAdd = true;
                                manualAdd = false;
                                neverManualAdd = true;
                                listAdapterData.clear();
                                for (int i = 1; i < dataArrayListSystem.size(); i++) {
                                    listAdapterData.add(dataArrayListSystem.get(i));
                                }
                                mListAdapter.notifyDataSetChanged();
                            } else {
                                Toast.makeText(MainActivity.this, "请检查定位！", Toast.LENGTH_LONG).show();
                            }
                        }
                        // TODO Auto-generated method stub
                        if (str.equals("手动添加")) {
                            if (locationSuccess) {
                                systemAdd = false;
                                manualAdd = true;
                                if (neverManualAdd) {
                                    neverManualAdd = false;
                                    //第一次手动添加时清除listAdapter里面的数据
                                    listAdapterData.clear();
                                    //disArray.clear();
                                    //dataArrayList.clear();
                                    mListAdapter.notifyDataSetChanged();
                                }
                                Intent intent = new Intent(MainActivity.this, ManualAddActivity.class);
                                intent.putExtra("latlng", myLocation);
                                startActivityForResult(intent, 1);
                            } else {
                                Toast.makeText(MainActivity.this, "请检查定位！", Toast.LENGTH_LONG).show();
                            }
                        }
                    }
                });
            }
        });
    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data){
        if (resultCode == RESULT_OK && requestCode == 1){
            Data returnData =(Data) data.getSerializableExtra("result");
            returnData.secquence = dataArrayList.size();
            dataArrayList.add(returnData);
            listAdapterData.add(returnData);

            int size = dataArrayList.size();
            //计算这次添加的地点与前面地点之间的距离
            ArrayList<String> desArray = new ArrayList<>();
            for (int j = 0; j < size - 1; j++)
                desArray.add(dataArrayList.get(j).getLatLng());
            String st = getRouteDistancUrl(dataArrayList.get(size-1).getLatLng(), desArray);
            new RequestTask(size, st, dataArrayList.get(0), disArray).execute();
            Log.d("fhshgfl", returnData.getAddress());
        }

        if (resultCode == RESULT_OK && requestCode == 2){
            Data returnData =(Data) data.getSerializableExtra("result");
            int index = returnData.getIndex();
            Log.d("dgawgagf", "返回了了啦啦啦啦" + String.valueOf(index));
            listAdapterData = new ArrayList<>();
            mListAdapter = new SwipeAdapter(MainActivity.this);
            mListView.setAdapter(mListAdapter);

            if (manualAdd){
                dataArrayList.get(index+1).setPhoneNum(returnData.getPhoneNum());
                dataArrayList.get(index+1).setAddress(returnData.getAddress());
                dataArrayList.get(index+1).setLat(returnData.getLat());
                dataArrayList.get(index+1).setLng(returnData.getLng());

                for (int i = 1; i < dataArrayList.size(); i ++){
                    listAdapterData.add(dataArrayList.get(i));
                    Log.d("fsfsgsd", dataArrayList.get(i).getAddress());
                }
            }else if (systemAdd){
                dataArrayListSystem.get(index+1).setPhoneNum(returnData.getPhoneNum());
                dataArrayListSystem.get(index+1).setAddress(returnData.getAddress());
                dataArrayListSystem.get(index+1).setLat(returnData.getLat());
                dataArrayListSystem.get(index+1).setLng(returnData.getLng());
                for (int i = 1; i < dataArrayListSystem.size(); i ++){
                    listAdapterData.add(dataArrayListSystem.get(i));
                }
            }
        }
        mListAdapter.notifyDataSetChanged();
        if (resultCode == RESULT_OK && requestCode == 3){
            userName = data.getStringExtra("loginResult");
            myLocation.userName = userName;
            System.out.println(userName);
            Toast.makeText(MainActivity.this, userName, Toast.LENGTH_LONG).show();
        }
    }

    void onListItemClick(final int index) {
        Data data = listAdapterData.get(index);
        data.setIndex(index);
        Intent intent = new Intent(MainActivity.this, ManualAddActivity.class);
        intent.putExtra("latlng", data);
        startActivityForResult(intent, 2);
    }

    @Override
    protected void onResume() {super.onResume();}
    @Override
    protected void onDestroy() {
        super.onDestroy();
        unregisterReceiver(mReceiver);
    }

    private class RequestTask extends AsyncTask<Void, Void, String> {
        private String url;
        private Data mData;
        private int mIndex;
        private ArrayList mDisArray;

        public RequestTask(int index, String stUrl, Data data, ArrayList stdisArray){
            url = stUrl;
            mData = data;
            mIndex = index;
            mDisArray = stdisArray;
        }
        @Override
        protected String doInBackground(Void... params) {
            return RequestData(url);
        }
        @Override
        protected void onPostExecute(String result) {
            super.onPostExecute(result);
            if (result != null) {
                if(mIndex == -1){
                    latLngAnalysis(result, mData);
                    startCountDisSysAddGate.countDown();
                }
                else
                    distanceAnalysis(result, mDisArray, mIndex);
                Log.d("resultJson", result);
            } else {
                Toast.makeText(MainActivity.this, "��������ʧ��", Toast.LENGTH_LONG)
                        .show();
            }
        }
    }

    public String RequestData(String url) {
        HttpGet get = new HttpGet(url);
        HttpClient client = new DefaultHttpClient();
        StringBuilder builder = null;
        String result = null;
        try {
            HttpResponse response = client.execute(get);
            if (response.getStatusLine().getStatusCode() == 200) {
                InputStream inputStream = response.getEntity().getContent();
                BufferedReader reader = new BufferedReader(
                        new InputStreamReader(inputStream));
                builder = new StringBuilder();
                String s = null;
                for (s = reader.readLine(); s != null; s = reader.readLine()) {
                    builder.append(s);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        try{
            result = builder.toString();
        }catch (NullPointerException e){
            e.printStackTrace();
        }
        return result;
    }

    public void latLngAnalysis(String result, Data data) {
        JSONObject object = null;
        try {
            object = new JSONObject(result);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        int status = object.optInt("status");
        if(status == 0){
            JSONObject ObjectInfo = object.optJSONObject("result");
            JSONObject resultObject = ObjectInfo.optJSONObject("location");
            data.setLat(resultObject.optDouble("lat"));
            data.setLng(resultObject.optDouble("lng"));
        }else{
            Log.d("MyStatus", "geocoder status wrong");
        }
    }

    public void distanceAnalysis(String result, ArrayList<Distance> disArray, int index){
        Log.d("test",result);
        JSONObject object = null;
        try {
            object = new JSONObject(result);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        int status = object.optInt("status");
        if(status == 0){
            JSONArray resultArray = object.optJSONArray("result");
            if(index <= 10){
                for(int i = 0; i < resultArray.length(); i++){
                    JSONObject resultObj = (JSONObject)resultArray.opt(i);
                    JSONObject disObj = resultObj.optJSONObject("distance");
                    int dis = disObj.optInt("value");
                    Distance distanceTmp = new Distance();
                    distanceTmp.setDistance(index, index + i + 1, dis);
                    disArray.add(distanceTmp);
                }
            }else {
                for(int i = 0; i < resultArray.length(); i++){
                    JSONObject resultObj = (JSONObject)resultArray.opt(i);
                    JSONObject disObj = resultObj.optJSONObject("distance");
                    int dis = disObj.optInt("value");
                    Distance distanceTmp = new Distance();
                    distanceTmp.setDistance(index, i + 1, dis);
                    disArray.add(distanceTmp);
                }
            }
        }else{
            Log.d("error", "route maxtir status wrong");
            Toast.makeText(MainActivity.this, "距离计算有问题",Toast.LENGTH_LONG).show();

        }
    }

    public String getGeocoderUrl(String address, String city) {
        return "http://api.map.baidu.com/geocoder/v2/?ak=" + AK + "&mcode=" + MCODE +
                "&output=json&address=" + address + "&city=" + city;
    }

    public String getRouteDistancUrl(String origin, ArrayList destination){
        String strDes = "";
        for(int i = 0; i < destination.size(); i++){
            if(i == destination.size() - 1)
                strDes = strDes + destination.get(i);
            else
                strDes = strDes + destination.get(i) + "%7C";
        }
        return "http://api.map.baidu.com/routematrix/v2/walking?output=json&mcode=" + MCODE +
                "&ak=" + AK + "&origins=" + origin + "&destinations=" + strDes;
    }

    class SocketCommunication extends Thread {
        public String strDisArray;
        Socket socket;
        public SocketCommunication(String str) {
            strDisArray = str;
        }
        @Override
        public void run() {
            //定义消息
            Message msg = new Message();
            msg.what = 0x11;
            Bundle bundle = new Bundle();
            bundle.clear();
            try {
                //连接服务器 并设置连接超时为5秒
                socket = new Socket();
                socket.connect(new InetSocketAddress("119.29.200.140", 8877), 5000);
                //获取输入输出流
                OutputStream ou = socket.getOutputStream();
                //向服务器发送信息
                ou.write(strDisArray.getBytes());
                ou.flush();
                BufferedReader bff = new BufferedReader(new InputStreamReader(
                        socket.getInputStream()));
                /*为什么这样就是不可以，好像是线程崩溃了
                 String line;
                while ( !((line = bff.readLine()) == null) ) {
                    buffer = buffer + line;
                }
                */
                returnResult = returnResult + bff.readLine();
                socketReturnGate.countDown();
                Log.d("fsfhkh", returnResult);
                bundle.putString("msg", returnResult.toString());
                msg.setData(bundle);
                //关闭各种输入输出流
                bff.close();
                ou.close();
                socket.close();
            } catch (SocketTimeoutException aa) {
                //连接超时 在UI界面显示消息
                bundle.putString("msg", "服务器连接失败！请检查网络是否打开");
                msg.setData(bundle);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    Runnable countDistanceSysAdd = new Runnable() {
        @Override
        public void run() {
            //等待经纬度计算完毕
            try{
                startCountDisSysAddGate.await();
            }catch(InterruptedException e){
                e.printStackTrace();
            }
            Log.d("fsdfsdfsefe", "latlng完毕");
            //计算系统添加时各地点之间的距离
            for (int i = 0; i < dataArrayListSystem.size() - 1; i++) {
                ArrayList<String> desArray = new ArrayList<>();
                for (int j = i + 1; j < dataArrayListSystem.size(); j++){
                    desArray.add(dataArrayListSystem.get(j).getLatLng());
                    Log.d("ddfjsf", dataArrayListSystem.get(j).getLatLng());
                }
                String st = getRouteDistancUrl(dataArrayListSystem.get(i).getLatLng(), desArray);
                Log.d("test",st);
                new RequestTask(i + 1, st, null, disArraySystem).execute();
            }

        }
    };

    Timer finishCountDistance = new Timer();
    TimerTask finishCDTimerTask = new TimerTask() {
        @Override
        public void run() {
            //Log.d("JsonDisntance", String.valueOf(disArraySystem.size())+"//");
            boolean manualAddFinish = !socketInCommunication && (disArray.size() == dataArrayList.size()*(dataArrayList.size()-1)/2)
                    && (disArray.size() != 0);
            boolean systemAddFinish = !socketInCommunication && (disArraySystem.size() == dataArrayListSystem.size()*(dataArrayListSystem.size()-1)/2)
                    && (disArraySystem.size() != 0);
            if((manualAddFinish || systemAddFinish) && (systemAdd || manualAdd)){
                Log.d("JsonDisntance", "完成");
                socketInCommunication = true;
                JSONObject jsonObject = new JSONObject();
                JSONArray disJsonArray = new JSONArray();
                try{
                    if(systemAdd){
                        for(int i = 0; i < disArraySystem.size(); i++){
                            disJsonArray.put( disArraySystem.get(i).getDistance());
                        }
                        jsonObject.put("distance", disJsonArray);//将距离打包成json数据
                    }else if (manualAdd){//如果手动添加过，disArray里面的数据顺序是乱的，则按另一种方式打包json数据
                        for(int i = 1; i < disArray.size(); i++){
                            for (int j = i + 1; j <= disArray.size(); j++){
                                for(int m = 0; m < disArray.size(); m++){
                                    int y = disArray.get(m).getY();
                                    int x = disArray.get(m).getX();
                                    if((i == x && j == y)||(i == y && j == x)){
                                        disJsonArray.put( disArray.get(m).getDistance());
                                    }
                                }
                            }
                        }
                        jsonObject.put("distance", disJsonArray);//将距离打包成json数据
                    }
                    Log.d("JsonDisntance", jsonObject.toString());
                }catch (JSONException e){
                    e.printStackTrace();
                }

                new Thread(socketReturnTask).start();
                new SocketCommunication(jsonObject.toString()).start();//soket将距离传给服务器获取结局

                if (finishCountDistance != null){
                    finishCountDistance.cancel();
                    finishCountDistance = null;
                }
                if (finishCDTimerTask != null){
                    finishCDTimerTask.cancel();
                    finishCDTimerTask = null;
                }
            }
        }
    };

    Runnable socketReturnTask = new Runnable() {
        @Override
        public void run() {
            //等待socket result 返回结果
            try{
                socketReturnGate.await();
            }catch(InterruptedException e){
                e.printStackTrace();
            }
            socketInCommunication = false;
            ArrayList<Data> orderArrayList = new ArrayList<>();
            try {
                JSONObject object = new JSONObject(returnResult);
                JSONArray resultArray = object.optJSONArray("order");

                int index;
                for (int i = 0; i < resultArray.length(); i++){
                    index = resultArray.optInt(i);
                    Log.d("orderArrayList", String.valueOf(index));
                    if (systemAdd){
                        orderArrayList.add(dataArrayListSystem.get(index));
                    }else if (manualAdd) {
                        orderArrayList.add(dataArrayList.get(index));
                    }

                }
            } catch (JSONException e) {
                e.printStackTrace();
            }

            Intent intent = new Intent();
            intent.putExtra("order", orderArrayList);
            intent.setClass(MainActivity.this, StartActivity.class);
            MainActivity.this.startActivity(intent);
            lodingDialog.dismiss();
            returnResult = "";
            neverStart = true;
        }
    };

    // listview中点击按键弹出对话框
    public void showInfo(final int position) {
        new AlertDialog.Builder(this).setTitle("我的提示").setMessage("确定要删除吗？")
                .setPositiveButton("确定", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        listAdapterData.remove(position);
                        if (systemAdd) {
                            dataArrayListSystem.remove(position);
                        } else if (manualAdd) {
                            dataArrayList.remove(position);
                        }
                        // 通过程序我们知道删除了，但是怎么刷新ListView呢？
                        // 只需要重新设置一下adapter
                        mListView.setAdapter(mListAdapter);
                    }
                }).show();
    }

    public class SwipeAdapter extends BaseAdapter {
        private Context mContext = null;
        public SwipeAdapter(Context context) {
            this.mContext = context;
        }
        @Override
        public int getCount() {
            return listAdapterData.size();
        }
        @Override
        public Object getItem(int arg0) {
            return arg0;
        }
        @Override
        public long getItemId(int arg0) {
            return arg0;
        }
        @Override
        public View getView(final int position, View contentView, ViewGroup arg2) {
            ViewHolder holder;
            if(contentView==null){
                holder = new ViewHolder();
                View view01 = LayoutInflater.from(mContext).inflate(R.layout.list_item_view, null);
                View view02 = LayoutInflater.from(mContext).inflate(R.layout.delete_layout, null);
                holder.phoneNum = (TextView) view01.findViewById(R.id.phoneNum);
                holder.address = (TextView) view01.findViewById(R.id.address);
                holder.sequence = (TextView) view01.findViewById(R.id.sequence);
                holder.btn = (Button) view02.findViewById(R.id.delete_btn);

                contentView = new SwipeItemLayout(view01, view02, null, null);
                contentView.setTag(holder);
            }else{
                holder = (ViewHolder) contentView.getTag();
            }
            Data person = listAdapterData.get(position);
            holder.phoneNum.setText(person.getPhoneNum());
            holder.address.setText(person.getAddress());
            holder.sequence.setText(String.valueOf(position+1));

            holder.btn.setOnClickListener(new View.OnClickListener() {

                @Override
                public void onClick(View arg0) {
                    //Toast.makeText(mContext, "click", Toast.LENGTH_LONG).show();
                    showInfo(position);
                }
            });
            return contentView;
        }
    }
    static class ViewHolder
    {
        TextView phoneNum;
        TextView address;
        TextView sequence;
        Button   btn;
    }



    /*
    Timer mTimer = new Timer();
    TimerTask mTimerTask = new TimerTask() {
        @Override
        public void run() {
            boolean latLngFinish = true;
            for (int i = 0; i < dataArrayList.size(); i++){
                if ( dataArrayList.get(i).getLng() <= 1.0){
                    latLngFinish = false;
                }
            }

            if (latLngFinish){
                //初始化计算data数据的距离
                for (int i = 0; i < 10; i++) {
                    ArrayList<String> desArray = new ArrayList<>();
                    for (int j = i + 1; j < 11; j++){
                        desArray.add(data[j].getLatLng());
                        Log.d("ddfjsf", data[j].getLatLng());
                    }
                    String st = getRouteDistancUrl(data[i].getLatLng(), desArray);
                    new RequestTask(i + 1, st, dataArrayList.get(i), disArray).execute();
                }
                if(mTimer != null) {
                    mTimer.cancel();
                    mTimer = null;
                }
                if (mTimerTask != null){
                    mTimerTask.cancel();
                    mTimerTask = null;
                }
            }
        }
    };
*/
}